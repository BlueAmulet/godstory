
/*  A Bison parser, made from cmdgram.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse CMDparse
#define yylex CMDlex
#define yyerror CMDerror
#define yylval CMDlval
#define yychar CMDchar
#define yydebug CMDdebug
#define yynerrs CMDnerrs
#define	rwDEFINE	258
#define	rwENDDEF	259
#define	rwDECLARE	260
#define	rwBREAK	261
#define	rwELSE	262
#define	rwCONTINUE	263
#define	rwGLOBAL	264
#define	rwIF	265
#define	rwNIL	266
#define	rwRETURN	267
#define	rwWHILE	268
#define	rwDO	269
#define	rwENDIF	270
#define	rwENDWHILE	271
#define	rwENDFOR	272
#define	rwDEFAULT	273
#define	rwFOR	274
#define	rwDATABLOCK	275
#define	rwSWITCH	276
#define	rwCASE	277
#define	rwSWITCHSTR	278
#define	rwCASEOR	279
#define	rwPACKAGE	280
#define	rwNAMESPACE	281
#define	rwCLASS	282
#define	rwMESSAGE	283
#define	ILLEGAL_TOKEN	284
#define	CHRCONST	285
#define	INTCONST	286
#define	TTAG	287
#define	VAR	288
#define	IDENT	289
#define	TYPE	290
#define	DOCBLOCK	291
#define	STRATOM	292
#define	TAGATOM	293
#define	FLTCONST	294
#define	opINTNAME	295
#define	opINTNAMER	296
#define	opMINUSMINUS	297
#define	opPLUSPLUS	298
#define	STMT_SEP	299
#define	opSHL	300
#define	opSHR	301
#define	opPLASN	302
#define	opMIASN	303
#define	opMLASN	304
#define	opDVASN	305
#define	opMODASN	306
#define	opANDASN	307
#define	opXORASN	308
#define	opORASN	309
#define	opSLASN	310
#define	opSRASN	311
#define	opCAT	312
#define	opEQ	313
#define	opNE	314
#define	opGE	315
#define	opLE	316
#define	opAND	317
#define	opOR	318
#define	opSTREQ	319
#define	opCOLONCOLON	320
#define	opMDASN	321
#define	opNDASN	322
#define	opNTASN	323
#define	opSTRNE	324
#define	UNARY	325

#line 1 "cmdgram.y"


// Make sure we don't get gram.h twice.
#define _CMDGRAM_H_

#include <stdlib.h>
#include <stdio.h>
#include "console/console.h"
#include "console/compiler.h"
#include "console/consoleInternal.h"

#ifndef YYDEBUG
#define YYDEBUG 0
#endif

#define YYSSIZE 350

int outtext(char *fmt, ...);
extern int serrors;

#define nil 0
#undef YY_ARGS
#define YY_ARGS(x)   x

int CMDlex();
void CMDerror(char *, ...);

#ifdef alloca
#undef alloca
#endif
#define alloca dMalloc

#line 31 "cmdgram.y"

        /* Reserved Word Definitions */
#line 41 "cmdgram.y"

        /* Constants and Identifier Definitions */
#line 55 "cmdgram.y"

        /* Operator Definitions */

#line 68 "cmdgram.y"
typedef union {
   char              c;
   int               i;
   const char *      s;
   char *            str;
   double            f;
   StmtNode *        stmt;
   ExprNode *        expr;
   SlotAssignNode *  slist;
   VarNode *         var;
   SlotDecl          slot;
   InternalSlotDecl  intslot;
   ObjectBlockDecl   odcl;
   ObjectDeclNode *  od;
   AssignDecl        asn;
   IfStmtNode *      ifnode;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		357
#define	YYFLAG		-32768
#define	YYNTBASE	96

#define YYTRANSLATE(x) ((unsigned)(x) <= 325 ? yytranslate[x] : 135)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    60,     2,     2,     2,    50,    49,     2,    51,
    52,    42,    40,    53,    41,    47,    43,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    54,    55,    44,
    46,    45,    92,    61,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    88,     2,    95,    58,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    56,    48,    57,    59,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    89,    90,    91,    93,    94
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     6,     8,    10,    12,    19,    21,    24,
    25,    28,    30,    32,    34,    36,    38,    41,    44,    47,
    51,    54,    59,    66,    68,    77,    88,    89,    91,    93,
    97,   108,   118,   125,   136,   144,   157,   167,   168,   171,
   172,   174,   175,   178,   179,   181,   182,   184,   186,   189,
   192,   196,   200,   202,   210,   218,   223,   231,   237,   239,
   243,   249,   257,   263,   270,   280,   289,   298,   306,   315,
   323,   331,   338,   340,   342,   346,   350,   354,   358,   362,
   366,   370,   374,   378,   381,   384,   386,   392,   396,   400,
   404,   408,   412,   416,   420,   424,   428,   432,   436,   440,
   444,   447,   450,   452,   454,   456,   458,   460,   462,   464,
   466,   468,   473,   477,   484,   488,   492,   494,   498,   500,
   502,   505,   508,   511,   514,   517,   520,   523,   526,   529,
   532,   534,   536,   538,   542,   549,   552,   558,   561,   565,
   571,   576,   583,   590,   591,   593,   595,   599,   601,   604,
   609,   615,   620,   628,   637,   639
};

static const short yyrhs[] = {    97,
     0,     0,    97,    98,     0,   102,     0,   103,     0,    99,
     0,    25,    34,    56,   100,    57,    55,     0,   103,     0,
   100,   103,     0,     0,   101,   102,     0,   119,     0,   120,
     0,   121,     0,   106,     0,   116,     0,     6,    55,     0,
     8,    55,     0,    12,    55,     0,    12,   123,    55,     0,
   122,    55,     0,    32,    46,   123,    55,     0,    32,    46,
   123,    53,   123,    55,     0,    36,     0,     3,    34,    51,
   104,    52,    56,   101,    57,     0,     3,    34,    87,    34,
    51,   104,    52,    56,   101,    57,     0,     0,   105,     0,
    33,     0,   105,    53,    33,     0,    20,    34,    51,    34,
   109,    52,    56,   132,    57,    55,     0,    28,   126,    51,
   110,   109,    52,    56,   112,    57,     0,    28,   126,    51,
   110,   109,    52,     0,     5,   126,    51,   110,   109,   111,
    52,    56,   113,    57,     0,     5,   126,    51,   110,   109,
   111,    52,     0,     5,   126,    51,    88,   110,    95,   109,
   111,    52,    56,   113,    57,     0,     5,   126,    51,    88,
   110,    95,   109,   111,    52,     0,     0,    54,    34,     0,
     0,   123,     0,     0,    53,   131,     0,     0,   132,     0,
     0,   132,     0,   114,     0,   132,   114,     0,   108,    55,
     0,   114,   108,    55,     0,    56,   101,    57,     0,   102,
     0,    21,    51,   123,    52,    56,   117,    57,     0,    23,
    51,   123,    52,    56,   117,    57,     0,    22,   118,    54,
   101,     0,    22,   118,    54,   101,    18,    54,   101,     0,
    22,   118,    54,   101,   117,     0,   123,     0,   118,    24,
   123,     0,    10,    51,   123,    52,   115,     0,    10,    51,
   123,    52,   115,     7,   115,     0,    13,    51,   123,    52,
   115,     0,    14,   115,    13,    51,   123,    52,     0,    19,
    51,   123,    55,   123,    55,   123,    52,   115,     0,    19,
    51,   123,    55,   123,    55,    52,   115,     0,    19,    51,
   123,    55,    55,   123,    52,   115,     0,    19,    51,   123,
    55,    55,    52,   115,     0,    19,    51,    55,   123,    55,
   123,    52,   115,     0,    19,    51,    55,   123,    55,    52,
   115,     0,    19,    51,    55,    55,   123,    52,   115,     0,
    19,    51,    55,    55,    52,   115,     0,   128,     0,   128,
     0,    51,   123,    52,     0,   123,    58,   123,     0,   123,
    50,   123,     0,   123,    49,   123,     0,   123,    48,   123,
     0,   123,    40,   123,     0,   123,    41,   123,     0,   123,
    42,   123,     0,   123,    43,   123,     0,    41,   123,     0,
    42,   123,     0,    32,     0,   123,    92,   123,    54,   123,
     0,   123,    44,   123,     0,   123,    45,   123,     0,   123,
    82,   123,     0,   123,    83,   123,     0,   123,    80,   123,
     0,   123,    81,   123,     0,   123,    85,   123,     0,   123,
    67,   123,     0,   123,    68,   123,     0,   123,    84,   123,
     0,   123,    86,   123,     0,   123,    93,   123,     0,   123,
    61,   123,     0,    60,   123,     0,    59,   123,     0,    38,
     0,    39,     0,    31,     0,     6,     0,   124,     0,   125,
     0,    34,     0,    37,     0,    33,     0,    33,    88,   134,
    95,     0,   123,    47,    34,     0,   123,    47,    34,    88,
   134,    95,     0,   123,    62,   126,     0,   123,    63,   126,
     0,    34,     0,    51,   123,    52,     0,    65,     0,    64,
     0,    69,   123,     0,    70,   123,     0,    71,   123,     0,
    72,   123,     0,    73,   123,     0,    74,   123,     0,    75,
   123,     0,    76,   123,     0,    77,   123,     0,    78,   123,
     0,   129,     0,   108,     0,   107,     0,    33,    46,   123,
     0,    33,    88,   134,    95,    46,   123,     0,    33,   127,
     0,    33,    88,   134,    95,   127,     0,   124,   127,     0,
   124,    46,   123,     0,   124,    46,    56,   131,    57,     0,
    34,    51,   130,    52,     0,    34,    87,    34,    51,   130,
    52,     0,   123,    47,    34,    51,   130,    52,     0,     0,
   131,     0,   123,     0,   131,    53,   123,     0,   133,     0,
   132,   133,     0,    34,    46,   123,    55,     0,    35,    34,
    46,   123,    55,     0,    20,    46,   123,    55,     0,    34,
    88,   134,    95,    46,   123,    55,     0,    35,    34,    88,
   134,    95,    46,   123,    55,     0,   123,     0,   134,    53,
   123,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   146,   151,   153,   158,   160,   162,   167,   172,   174,   179,
   181,   186,   187,   188,   189,   190,   191,   193,   195,   197,
   199,   201,   203,   205,   210,   212,   217,   219,   224,   226,
   231,   236,   238,   243,   245,   247,   249,   254,   256,   261,
   263,   268,   270,   275,   277,   282,   284,   286,   288,   293,
   295,   300,   302,   307,   309,   314,   316,   318,   323,   325,
   330,   332,   337,   339,   344,   346,   348,   350,   352,   354,
   356,   358,   363,   368,   370,   372,   374,   376,   378,   380,
   382,   384,   386,   388,   390,   392,   394,   396,   398,   400,
   402,   404,   406,   408,   410,   412,   414,   416,   418,   420,
   422,   424,   426,   428,   430,   432,   434,   436,   438,   440,
   442,   444,   449,   451,   456,   458,   463,   465,   470,   472,
   474,   476,   478,   480,   482,   484,   486,   488,   490,   492,
   497,   499,   501,   503,   505,   507,   509,   511,   513,   515,
   520,   522,   524,   529,   531,   536,   538,   543,   545,   550,
   552,   554,   556,   558,   563,   565
};

static const char * const yytname[] = {   "$","error","$undefined.","rwDEFINE",
"rwENDDEF","rwDECLARE","rwBREAK","rwELSE","rwCONTINUE","rwGLOBAL","rwIF","rwNIL",
"rwRETURN","rwWHILE","rwDO","rwENDIF","rwENDWHILE","rwENDFOR","rwDEFAULT","rwFOR",
"rwDATABLOCK","rwSWITCH","rwCASE","rwSWITCHSTR","rwCASEOR","rwPACKAGE","rwNAMESPACE",
"rwCLASS","rwMESSAGE","ILLEGAL_TOKEN","CHRCONST","INTCONST","TTAG","VAR","IDENT",
"TYPE","DOCBLOCK","STRATOM","TAGATOM","FLTCONST","'+'","'-'","'*'","'/'","'<'",
"'>'","'='","'.'","'|'","'&'","'%'","'('","')'","','","':'","';'","'{'","'}'",
"'^'","'~'","'!'","'@'","opINTNAME","opINTNAMER","opMINUSMINUS","opPLUSPLUS",
"STMT_SEP","opSHL","opSHR","opPLASN","opMIASN","opMLASN","opDVASN","opMODASN",
"opANDASN","opXORASN","opORASN","opSLASN","opSRASN","opCAT","opEQ","opNE","opGE",
"opLE","opAND","opOR","opSTREQ","opCOLONCOLON","'['","opMDASN","opNDASN","opNTASN",
"'?'","opSTRNE","UNARY","']'","start","decl_list","decl","package_decl","fn_decl_list",
"statement_list","stmt","fn_decl_stmt","var_list_decl","var_list","datablock_decl",
"message_decl","object_decl","parent_block","object_name","object_args","message_declare_block",
"object_declare_block","object_decl_list","stmt_block","switch_stmt","case_block",
"case_expr","if_stmt","while_stmt","for_stmt","expression_stmt","expr","slot_acc",
"intslot_acc","class_name_expr","assign_op_struct","stmt_expr","funcall_expr",
"expr_list_decl","expr_list","slot_assign_list","slot_assign","aidx_expr",""
};
#endif

static const short yyr1[] = {     0,
    96,    97,    97,    98,    98,    98,    99,   100,   100,   101,
   101,   102,   102,   102,   102,   102,   102,   102,   102,   102,
   102,   102,   102,   102,   103,   103,   104,   104,   105,   105,
   106,   107,   107,   108,   108,   108,   108,   109,   109,   110,
   110,   111,   111,   112,   112,   113,   113,   113,   113,   114,
   114,   115,   115,   116,   116,   117,   117,   117,   118,   118,
   119,   119,   120,   120,   121,   121,   121,   121,   121,   121,
   121,   121,   122,   123,   123,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
   123,   123,   124,   124,   125,   125,   126,   126,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
   128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
   129,   129,   129,   130,   130,   131,   131,   132,   132,   133,
   133,   133,   133,   133,   134,   134
};

static const short yyr2[] = {     0,
     1,     0,     2,     1,     1,     1,     6,     1,     2,     0,
     2,     1,     1,     1,     1,     1,     2,     2,     2,     3,
     2,     4,     6,     1,     8,    10,     0,     1,     1,     3,
    10,     9,     6,    10,     7,    12,     9,     0,     2,     0,
     1,     0,     2,     0,     1,     0,     1,     1,     2,     2,
     3,     3,     1,     7,     7,     4,     7,     5,     1,     3,
     5,     7,     5,     6,     9,     8,     8,     7,     8,     7,
     7,     6,     1,     1,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     2,     2,     1,     5,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     4,     3,     6,     3,     3,     1,     3,     1,     1,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     1,     1,     1,     3,     6,     2,     5,     2,     3,     5,
     4,     6,     6,     0,     1,     1,     3,     1,     2,     4,
     5,     4,     7,     8,     1,     3
};

static const short yydefact[] = {     2,
     1,     0,     0,   106,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   105,    86,   111,   109,    24,
   110,   103,   104,     0,     0,     0,     0,     0,     3,     6,
     4,     5,    15,   133,   132,    16,    12,    13,    14,     0,
     0,   107,   108,    74,   131,     0,   117,     0,     0,    17,
    18,     0,   106,    86,    19,     0,    74,     0,    10,    53,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
   119,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   136,   144,     0,    84,    85,     0,   102,   101,
    21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    27,     0,
     0,    40,     0,    20,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    40,     0,   134,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   155,     0,   146,     0,
   145,     0,    75,    80,    81,    82,    83,    88,    89,   113,
    79,    78,    77,    76,   100,   115,   116,    95,    96,    92,
    93,    90,    91,    97,    94,    98,     0,    99,     0,   139,
    29,     0,    28,     0,   118,    40,    38,    41,     0,     0,
    52,    11,     0,     0,     0,     0,    38,     0,     0,     0,
     8,    38,     0,    22,     0,   112,   141,     0,   144,   144,
     0,     0,     0,     0,     0,    27,     0,     0,    42,    61,
    63,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     9,     0,     0,   156,     0,   137,   147,     0,     0,
     0,    87,   140,    10,    30,     0,    38,    39,     0,     0,
     0,    64,    72,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     7,    33,    23,   135,   142,   143,   114,
     0,     0,    42,    43,    35,    62,    71,    70,     0,    68,
     0,     0,     0,     0,     0,    59,    54,    55,    44,    25,
    10,     0,    46,    69,    67,    66,     0,     0,     0,     0,
     0,   148,     0,    10,     0,    45,     0,    37,     0,     0,
    48,    47,    65,     0,     0,     0,     0,     0,   149,    60,
    56,    32,    26,    46,    50,    34,     0,    49,     0,     0,
     0,     0,     0,    31,     0,    58,     0,    51,   152,   150,
     0,     0,     0,    10,    36,     0,   151,     0,    57,     0,
     0,   153,     0,   154,     0,     0,     0
};

static const short yydefgoto[] = {   355,
     1,    29,    30,   200,   126,    60,    32,   182,   183,    33,
    34,    35,   219,   187,   250,   305,   310,   311,    61,    36,
   262,   285,    37,    38,    39,    40,    41,    42,    43,    49,
    83,    57,    45,   150,   151,   312,   302,   148
};

static const short yypact[] = {-32768,
   109,    -4,    -9,   -23,   -15,    -8,   655,    19,   385,    35,
    54,    43,    46,    70,    -9,-32768,    67,  2411,    -3,-32768,
-32768,-32768,-32768,   895,   895,   895,   895,   895,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    61,
  2158,  2431,-32768,    63,-32768,    -2,-32768,   895,    80,-32768,
-32768,   895,-32768,-32768,-32768,   970,-32768,   895,-32768,-32768,
   120,   670,    84,   895,   895,    82,    85,   895,   895,-32768,
-32768,   895,   895,   895,   895,   895,   895,   895,   895,   895,
   895,   895,-32768,   895,   105,   -27,   -27,  1024,   -27,   -27,
-32768,   895,   895,   895,   895,   895,   895,   115,   895,   895,
   895,   895,   895,    -9,    -9,   895,   895,   895,   895,   895,
   895,   895,   895,   895,   895,   895,   711,-32768,   121,   119,
  1078,    13,  1132,-32768,  1186,   469,   104,   727,  1240,   122,
  1294,  1348,   155,   895,   916,  2158,  2158,  2158,  2158,  2158,
  2158,  2158,  2158,  2158,  2158,  2158,  2158,   -39,  2158,   110,
   108,   113,-32768,   178,   178,   -27,   -27,   196,   196,   -28,
  2299,  2357,   -27,  2328,  2485,-32768,-32768,    40,    40,  2386,
  2386,   196,   196,  2270,  2241,  2485,  1402,  2485,   895,  2158,
-32768,   118,   112,   116,-32768,   895,   117,  2158,   385,   385,
-32768,-32768,   895,   767,  1456,   783,   117,   123,   125,    10,
-32768,   117,   895,-32768,   895,  2446,-32768,   895,   895,   895,
   895,   895,    52,   127,   142,   121,    77,   153,   143,   169,
-32768,  1510,   385,  1564,   823,   839,  1618,   145,   176,   176,
   144,-32768,   149,  1672,  2158,   895,-32768,  2158,   150,   160,
   -38,  2212,-32768,-32768,-32768,   163,   117,-32768,   895,   164,
   385,-32768,-32768,   385,   385,  1726,   385,  1780,   879,   151,
   895,   161,   162,-32768,   168,-32768,  2158,-32768,-32768,-32768,
   528,   170,   143,   108,   171,-32768,-32768,-32768,   385,-32768,
   385,   385,  1834,    57,     5,  2158,-32768,-32768,    57,-32768,
-32768,   165,   139,-32768,-32768,-32768,   385,   183,   -30,   199,
     4,-32768,   895,-32768,   173,    57,   589,   179,   187,   177,
   239,   139,-32768,   895,   895,   895,   -25,   190,-32768,  2158,
   172,-32768,-32768,   139,-32768,-32768,   192,   239,  1888,  1942,
   -20,   895,   895,-32768,   194,-32768,   195,-32768,-32768,-32768,
   203,  1996,   -19,-32768,-32768,   895,-32768,   205,   631,  2050,
   895,-32768,  2104,-32768,   255,   261,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,  -238,     0,  -122,    44,-32768,-32768,
-32768,  -204,  -185,  -112,   -11,-32768,   -59,   -46,  -186,-32768,
  -223,-32768,-32768,-32768,-32768,-32768,   260,-32768,-32768,    -5,
   -40,    -1,-32768,  -182,  -170,  -258,  -149,  -206
};


#define	YYLAST		2553


static const short yytable[] = {    44,
    31,   118,   220,   221,   241,   271,   263,    44,   213,    67,
   201,   228,     2,   205,   205,   315,   233,     3,    53,    98,
   332,   202,   210,   298,    47,   301,   239,   240,   303,    46,
   306,    50,   205,   205,   104,   105,   253,   299,   300,    51,
    15,    48,    52,    16,    54,    18,    19,    84,   119,    21,
    22,    23,   307,    24,    25,   206,   270,   316,   304,   211,
   318,   273,   333,    26,   276,   321,   231,   277,   278,    58,
   280,    27,    28,   217,   341,   348,   298,   232,   274,    92,
    93,    94,    95,    85,   120,    62,    98,    63,   309,   101,
   299,   300,   294,    64,   295,   296,    65,   336,   166,   167,
   186,   104,   105,    66,   208,   349,   327,   309,   243,   331,
   313,     2,    68,     3,     4,    91,     5,   -73,     6,   309,
     7,     8,     9,   327,    44,   192,   343,    10,    11,    12,
   122,    13,   127,    14,   130,   134,    15,   133,   152,    16,
    17,    18,    19,     3,    20,    21,    22,    23,   160,    24,
    25,   319,   184,   181,   193,   197,   319,     2,   298,    26,
   208,   207,   319,   209,   215,   237,   216,    27,    28,   214,
   218,   247,   299,   300,   245,   251,     3,     4,   229,     5,
   230,     6,   244,     7,     8,     9,   248,    44,    44,   335,
    10,    11,    12,   261,    13,   249,   260,   261,   264,    15,
   265,   268,    16,    17,    18,    19,   284,    20,    21,    22,
    23,   269,    24,    25,   272,   275,   308,   287,   288,    94,
    95,    44,    26,   289,    98,   291,   293,   101,   314,   322,
    27,    28,   317,   326,   324,    92,    93,    94,    95,   104,
   105,   325,    98,     3,   334,   101,   338,   344,   346,    44,
   351,   345,    44,    44,   356,    44,   103,   104,   105,   246,
   357,   292,   106,   107,   337,   328,    56,     0,     0,    44,
   192,     0,     0,     0,     0,     0,     0,    44,     0,    44,
    44,   114,     0,    86,    87,    88,    89,    90,   116,     0,
     0,     0,     0,     0,     0,    44,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    44,   192,   121,     0,     0,
     0,   123,     0,     0,     0,     0,     0,   125,     0,    44,
   192,   129,     0,   131,   132,     0,     0,   135,   136,     0,
     0,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,     0,   149,     0,     0,     0,    44,   192,     0,
     0,   154,   155,   156,   157,   158,   159,     0,   161,   162,
   163,   164,   165,     0,     0,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,   180,     0,     0,     0,
     0,   188,     0,     0,     0,     0,     0,   195,     0,     3,
     4,     0,     5,   188,     6,     0,     7,     8,     9,     0,
     0,     0,     0,    10,    11,    12,     0,    13,     0,     0,
     0,     0,    15,     0,     0,    16,    17,    18,    19,     0,
    20,    21,    22,    23,     0,    24,    25,     0,     0,     0,
     0,     0,     0,     0,     0,    26,     0,     0,   149,     0,
    59,     0,     0,    27,    28,   188,     0,     0,     0,     0,
     0,     0,   222,   224,     0,   227,     0,     0,     0,     0,
     0,     0,   234,     0,   235,     0,     0,   238,   149,   149,
   147,   242,     0,     3,     4,     0,     5,     0,     6,     0,
     7,     8,     9,     0,   256,   258,     0,    10,    11,    12,
     0,    13,     0,     0,     0,   267,    15,     0,     0,    16,
    17,    18,    19,     0,    20,    21,    22,    23,   149,    24,
    25,     0,     0,     0,     0,     0,     0,     0,   283,    26,
   286,     0,     0,     0,     0,   191,     0,    27,    28,     0,
     0,     0,     3,     4,     0,     5,     0,     6,     0,     7,
     8,     9,     0,     0,     0,     0,    10,    11,    12,     0,
    13,     0,     0,     0,     0,    15,     0,     0,    16,    17,
    18,    19,   320,    20,    21,    22,    23,     0,    24,    25,
     0,     0,     0,   329,   330,   147,     0,     0,    26,     0,
     0,     0,     0,     0,   290,     0,    27,    28,     0,     0,
     0,   342,   147,     3,     4,     0,     5,     0,     6,     0,
     7,     8,     9,     0,     0,   350,     0,    10,    11,    12,
   353,    13,     0,     0,     0,     0,    15,     0,     0,    16,
    17,    18,    19,     0,    20,    21,    22,    23,     0,    24,
    25,     0,     0,     0,     0,     3,     4,     0,     5,    26,
     6,     0,     7,     8,     9,   323,     0,    27,    28,    10,
    11,    12,     0,    13,     0,     0,     0,     0,    15,     3,
    53,    16,    17,    18,    19,     0,    20,    21,    22,    23,
     0,    24,    25,     0,     3,    53,     0,     0,     0,     0,
     0,    26,    15,     0,     0,    16,    54,    18,    19,    27,
    28,    21,    22,    23,     0,    24,    25,    15,     0,     0,
    16,    54,    18,    19,     0,    26,    21,    22,    23,    55,
    24,    25,     0,    27,    28,     3,    53,     0,     0,     0,
    26,     0,     0,     0,   128,     0,     0,     0,    27,    28,
     0,     3,    53,     0,     0,     0,     0,     0,    15,     0,
     0,    16,    54,    18,    19,     0,     0,    21,    22,    23,
     0,    24,    25,     0,    15,     0,     0,    16,    54,    18,
    19,    26,     0,    21,    22,    23,   179,    24,    25,    27,
    28,     3,    53,     0,     0,     0,     0,    26,     0,     0,
     0,   194,     0,     0,     0,    27,    28,     3,    53,     0,
     0,     0,     0,     0,    15,     0,     0,    16,    54,    18,
    19,     0,     0,    21,    22,    23,     0,    24,    25,     0,
    15,     0,     0,    16,    54,    18,    19,    26,   223,    21,
    22,    23,     0,    24,    25,    27,    28,     3,    53,     0,
     0,     0,     0,    26,     0,     0,     0,   226,     0,     0,
     0,    27,    28,     3,    53,     0,     0,     0,     0,     0,
    15,     0,     0,    16,    54,    18,    19,     0,     0,    21,
    22,    23,     0,    24,    25,     0,    15,     0,     0,    16,
    54,    18,    19,    26,   255,    21,    22,    23,     0,    24,
    25,    27,    28,     3,    53,     0,     0,     0,     0,    26,
   257,     0,     0,     0,     0,     0,     0,    27,    28,     3,
    53,     0,     0,     0,     0,     0,    15,     0,     0,    16,
    54,    18,    19,     0,     0,    21,    22,    23,     0,    24,
    25,     0,    15,     0,     0,    16,    54,    18,    19,    26,
   282,    21,    22,    23,     0,    24,    25,    27,    28,     0,
     0,     0,     0,     0,     0,    26,     0,     0,     0,     0,
     0,     0,     0,    27,    28,    92,    93,    94,    95,    96,
    97,     0,    98,    99,   100,   101,     0,     0,   203,     0,
   204,     0,     0,   102,     0,     0,   103,   104,   105,     0,
     0,     0,   106,   107,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   108,   109,   110,   111,   112,
   113,   114,     0,     0,     0,     0,     0,   115,   116,    92,
    93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
     0,     0,     0,     0,   124,     0,     0,   102,     0,     0,
   103,   104,   105,     0,     0,     0,   106,   107,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
   109,   110,   111,   112,   113,   114,     0,     0,     0,     0,
     0,   115,   116,    92,    93,    94,    95,    96,    97,     0,
    98,    99,   100,   101,     0,   153,     0,     0,     0,     0,
     0,   102,     0,     0,   103,   104,   105,     0,     0,     0,
   106,   107,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   108,   109,   110,   111,   112,   113,   114,
     0,     0,     0,     0,     0,   115,   116,    92,    93,    94,
    95,    96,    97,     0,    98,    99,   100,   101,     0,   185,
     0,     0,     0,     0,     0,   102,     0,     0,   103,   104,
   105,     0,     0,     0,   106,   107,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
   111,   112,   113,   114,     0,     0,     0,     0,     0,   115,
   116,    92,    93,    94,    95,    96,    97,     0,    98,    99,
   100,   101,     0,   189,     0,     0,     0,     0,     0,   102,
     0,     0,   103,   104,   105,     0,     0,     0,   106,   107,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   108,   109,   110,   111,   112,   113,   114,     0,     0,
     0,     0,     0,   115,   116,    92,    93,    94,    95,    96,
    97,     0,    98,    99,   100,   101,     0,   190,     0,     0,
     0,     0,     0,   102,     0,     0,   103,   104,   105,     0,
     0,     0,   106,   107,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   108,   109,   110,   111,   112,
   113,   114,     0,     0,     0,     0,     0,   115,   116,    92,
    93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
     0,     0,     0,     0,   196,     0,     0,   102,     0,     0,
   103,   104,   105,     0,     0,     0,   106,   107,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
   109,   110,   111,   112,   113,   114,     0,     0,     0,     0,
     0,   115,   116,    92,    93,    94,    95,    96,    97,     0,
    98,    99,   100,   101,     0,   198,     0,     0,     0,     0,
     0,   102,     0,     0,   103,   104,   105,     0,     0,     0,
   106,   107,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   108,   109,   110,   111,   112,   113,   114,
     0,     0,     0,     0,     0,   115,   116,    92,    93,    94,
    95,    96,    97,     0,    98,    99,   100,   101,     0,   199,
     0,     0,     0,     0,     0,   102,     0,     0,   103,   104,
   105,     0,     0,     0,   106,   107,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
   111,   112,   113,   114,     0,     0,     0,     0,     0,   115,
   116,    92,    93,    94,    95,    96,    97,     0,    98,    99,
   100,   101,     0,     0,     0,   212,     0,     0,     0,   102,
     0,     0,   103,   104,   105,     0,     0,     0,   106,   107,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   108,   109,   110,   111,   112,   113,   114,     0,     0,
     0,     0,     0,   115,   116,    92,    93,    94,    95,    96,
    97,     0,    98,    99,   100,   101,     0,     0,     0,     0,
   225,     0,     0,   102,     0,     0,   103,   104,   105,     0,
     0,     0,   106,   107,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   108,   109,   110,   111,   112,
   113,   114,     0,     0,     0,     0,     0,   115,   116,    92,
    93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
     0,   252,     0,     0,     0,     0,     0,   102,     0,     0,
   103,   104,   105,     0,     0,     0,   106,   107,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
   109,   110,   111,   112,   113,   114,     0,     0,     0,     0,
     0,   115,   116,    92,    93,    94,    95,    96,    97,     0,
    98,    99,   100,   101,     0,   254,     0,     0,     0,     0,
     0,   102,     0,     0,   103,   104,   105,     0,     0,     0,
   106,   107,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   108,   109,   110,   111,   112,   113,   114,
     0,     0,     0,     0,     0,   115,   116,    92,    93,    94,
    95,    96,    97,     0,    98,    99,   100,   101,     0,     0,
     0,     0,   259,     0,     0,   102,     0,     0,   103,   104,
   105,     0,     0,     0,   106,   107,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
   111,   112,   113,   114,     0,     0,     0,     0,     0,   115,
   116,    92,    93,    94,    95,    96,    97,     0,    98,    99,
   100,   101,     0,     0,     0,     0,   266,     0,     0,   102,
     0,     0,   103,   104,   105,     0,     0,     0,   106,   107,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   108,   109,   110,   111,   112,   113,   114,     0,     0,
     0,     0,     0,   115,   116,    92,    93,    94,    95,    96,
    97,     0,    98,    99,   100,   101,     0,   279,     0,     0,
     0,     0,     0,   102,     0,     0,   103,   104,   105,     0,
     0,     0,   106,   107,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   108,   109,   110,   111,   112,
   113,   114,     0,     0,     0,     0,     0,   115,   116,    92,
    93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
     0,   281,     0,     0,     0,     0,     0,   102,     0,     0,
   103,   104,   105,     0,     0,     0,   106,   107,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
   109,   110,   111,   112,   113,   114,     0,     0,     0,     0,
     0,   115,   116,    92,    93,    94,    95,    96,    97,     0,
    98,    99,   100,   101,     0,   297,     0,     0,     0,     0,
     0,   102,     0,     0,   103,   104,   105,     0,     0,     0,
   106,   107,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   108,   109,   110,   111,   112,   113,   114,
     0,     0,     0,     0,     0,   115,   116,    92,    93,    94,
    95,    96,    97,     0,    98,    99,   100,   101,     0,     0,
     0,     0,   339,     0,     0,   102,     0,     0,   103,   104,
   105,     0,     0,     0,   106,   107,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
   111,   112,   113,   114,     0,     0,     0,     0,     0,   115,
   116,    92,    93,    94,    95,    96,    97,     0,    98,    99,
   100,   101,     0,     0,     0,     0,   340,     0,     0,   102,
     0,     0,   103,   104,   105,     0,     0,     0,   106,   107,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   108,   109,   110,   111,   112,   113,   114,     0,     0,
     0,     0,     0,   115,   116,    92,    93,    94,    95,    96,
    97,     0,    98,    99,   100,   101,     0,     0,     0,     0,
   347,     0,     0,   102,     0,     0,   103,   104,   105,     0,
     0,     0,   106,   107,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   108,   109,   110,   111,   112,
   113,   114,     0,     0,     0,     0,     0,   115,   116,    92,
    93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
     0,     0,     0,     0,   352,     0,     0,   102,     0,     0,
   103,   104,   105,     0,     0,     0,   106,   107,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
   109,   110,   111,   112,   113,   114,     0,     0,     0,     0,
     0,   115,   116,    92,    93,    94,    95,    96,    97,     0,
    98,    99,   100,   101,     0,     0,     0,     0,   354,     0,
     0,   102,     0,     0,   103,   104,   105,     0,     0,     0,
   106,   107,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   108,   109,   110,   111,   112,   113,   114,
     0,     0,     0,     0,     0,   115,   116,    92,    93,    94,
    95,    96,    97,     0,    98,    99,   100,   101,     0,     0,
     0,     0,     0,     0,     0,   102,     0,     0,   103,   104,
   105,     0,     0,     0,   106,   107,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
   111,   112,   113,   114,     0,     0,     0,     0,     0,   115,
   116,    92,    93,    94,    95,    96,    97,     0,    98,    99,
   100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     0,     0,   103,   104,   105,     0,     0,     0,   106,   107,
    92,    93,    94,    95,    96,    97,     0,    98,    99,   100,
   101,   108,   109,   110,   111,   112,   113,   114,   102,     0,
     0,   103,   104,   105,   116,     0,     0,   106,   107,    92,
    93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
   108,   109,   110,   111,   112,     0,   114,   102,     0,     0,
   103,   104,   105,   116,     0,     0,   106,   107,    92,    93,
    94,    95,    96,    97,     0,    98,     0,   100,   101,   108,
   109,   110,   111,     0,     0,   114,   102,     0,     0,   103,
   104,   105,   116,     0,     0,   106,   107,    92,    93,    94,
    95,    96,    97,     0,    98,     0,   100,   101,   108,   109,
   110,   111,     0,     0,   114,     0,     0,     0,   103,   104,
   105,   116,     0,     0,   106,   107,    92,    93,    94,    95,
    96,    97,     0,    98,     0,     0,   101,   108,   109,   110,
   111,     0,     0,   114,     0,     0,     0,   103,   104,   105,
   116,     0,     0,   106,   107,    92,    93,    94,    95,    96,
    97,     0,    98,     0,     0,   101,   108,   109,   110,   111,
     0,     0,   114,     0,     0,     0,   103,   104,   105,   116,
     0,     0,   106,   107,     0,     0,    69,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   110,   111,     0,
     0,   114,     0,     0,    70,    71,   117,     0,   116,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,     0,
     0,   236,     0,     0,    70,    71,     0,     0,    82,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    70,
    71,     0,     0,     0,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    92,    93,    94,    95,     0,     0,
     0,    98,     0,     0,   101,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   104,   105,     0,     0,
     0,   106,   107
};

static const short yycheck[] = {     1,
     1,    42,   189,   190,   211,   244,   230,     9,   179,    15,
   133,   197,     3,    53,    53,    46,   202,     5,     6,    47,
    46,   134,    51,    20,    34,   284,   209,   210,    24,    34,
   289,    55,    53,    53,    62,    63,   223,    34,    35,    55,
    28,    51,    51,    31,    32,    33,    34,    51,    51,    37,
    38,    39,   291,    41,    42,    95,    95,    88,    54,    88,
    57,   247,    88,    51,   251,   304,    57,   254,   255,    51,
   257,    59,    60,   186,    95,    95,    20,   200,   249,    40,
    41,    42,    43,    87,    87,    51,    47,    34,   293,    50,
    34,    35,   279,    51,   281,   282,    51,   321,   104,   105,
    88,    62,    63,    34,    53,   344,   311,   312,    57,   316,
   297,     3,    46,     5,     6,    55,     8,    55,    10,   324,
    12,    13,    14,   328,   126,   126,   333,    19,    20,    21,
    51,    23,    13,    25,    51,    51,    28,    56,    34,    31,
    32,    33,    34,     5,    36,    37,    38,    39,    34,    41,
    42,   301,    34,    33,    51,    34,   306,     3,    20,    51,
    53,    52,   312,    51,    53,   206,    51,    59,    60,    52,
    54,    95,    34,    35,    33,     7,     5,     6,    56,     8,
    56,    10,    56,    12,    13,    14,    34,   189,   190,    18,
    19,    20,    21,    22,    23,    53,    52,    22,    55,    28,
    52,    52,    31,    32,    33,    34,    56,    36,    37,    38,
    39,    52,    41,    42,    52,    52,    52,    57,    57,    42,
    43,   223,    51,    56,    47,    56,    56,    50,    46,    57,
    59,    60,    34,    57,    56,    40,    41,    42,    43,    62,
    63,    55,    47,     5,    55,    50,    55,    54,    46,   251,
    46,    57,   254,   255,     0,   257,    61,    62,    63,   216,
     0,   273,    67,    68,   324,   312,     7,    -1,    -1,   271,
   271,    -1,    -1,    -1,    -1,    -1,    -1,   279,    -1,   281,
   282,    86,    -1,    24,    25,    26,    27,    28,    93,    -1,
    -1,    -1,    -1,    -1,    -1,   297,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   307,   307,    48,    -1,    -1,
    -1,    52,    -1,    -1,    -1,    -1,    -1,    58,    -1,   321,
   321,    62,    -1,    64,    65,    -1,    -1,    68,    69,    -1,
    -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    -1,    84,    -1,    -1,    -1,   349,   349,    -1,
    -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
   101,   102,   103,    -1,    -1,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,    -1,    -1,    -1,
    -1,   122,    -1,    -1,    -1,    -1,    -1,   128,    -1,     5,
     6,    -1,     8,   134,    10,    -1,    12,    13,    14,    -1,
    -1,    -1,    -1,    19,    20,    21,    -1,    23,    -1,    -1,
    -1,    -1,    28,    -1,    -1,    31,    32,    33,    34,    -1,
    36,    37,    38,    39,    -1,    41,    42,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,   179,    -1,
    56,    -1,    -1,    59,    60,   186,    -1,    -1,    -1,    -1,
    -1,    -1,   193,   194,    -1,   196,    -1,    -1,    -1,    -1,
    -1,    -1,   203,    -1,   205,    -1,    -1,   208,   209,   210,
   211,   212,    -1,     5,     6,    -1,     8,    -1,    10,    -1,
    12,    13,    14,    -1,   225,   226,    -1,    19,    20,    21,
    -1,    23,    -1,    -1,    -1,   236,    28,    -1,    -1,    31,
    32,    33,    34,    -1,    36,    37,    38,    39,   249,    41,
    42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   259,    51,
   261,    -1,    -1,    -1,    -1,    57,    -1,    59,    60,    -1,
    -1,    -1,     5,     6,    -1,     8,    -1,    10,    -1,    12,
    13,    14,    -1,    -1,    -1,    -1,    19,    20,    21,    -1,
    23,    -1,    -1,    -1,    -1,    28,    -1,    -1,    31,    32,
    33,    34,   303,    36,    37,    38,    39,    -1,    41,    42,
    -1,    -1,    -1,   314,   315,   316,    -1,    -1,    51,    -1,
    -1,    -1,    -1,    -1,    57,    -1,    59,    60,    -1,    -1,
    -1,   332,   333,     5,     6,    -1,     8,    -1,    10,    -1,
    12,    13,    14,    -1,    -1,   346,    -1,    19,    20,    21,
   351,    23,    -1,    -1,    -1,    -1,    28,    -1,    -1,    31,
    32,    33,    34,    -1,    36,    37,    38,    39,    -1,    41,
    42,    -1,    -1,    -1,    -1,     5,     6,    -1,     8,    51,
    10,    -1,    12,    13,    14,    57,    -1,    59,    60,    19,
    20,    21,    -1,    23,    -1,    -1,    -1,    -1,    28,     5,
     6,    31,    32,    33,    34,    -1,    36,    37,    38,    39,
    -1,    41,    42,    -1,     5,     6,    -1,    -1,    -1,    -1,
    -1,    51,    28,    -1,    -1,    31,    32,    33,    34,    59,
    60,    37,    38,    39,    -1,    41,    42,    28,    -1,    -1,
    31,    32,    33,    34,    -1,    51,    37,    38,    39,    55,
    41,    42,    -1,    59,    60,     5,     6,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    55,    -1,    -1,    -1,    59,    60,
    -1,     5,     6,    -1,    -1,    -1,    -1,    -1,    28,    -1,
    -1,    31,    32,    33,    34,    -1,    -1,    37,    38,    39,
    -1,    41,    42,    -1,    28,    -1,    -1,    31,    32,    33,
    34,    51,    -1,    37,    38,    39,    56,    41,    42,    59,
    60,     5,     6,    -1,    -1,    -1,    -1,    51,    -1,    -1,
    -1,    55,    -1,    -1,    -1,    59,    60,     5,     6,    -1,
    -1,    -1,    -1,    -1,    28,    -1,    -1,    31,    32,    33,
    34,    -1,    -1,    37,    38,    39,    -1,    41,    42,    -1,
    28,    -1,    -1,    31,    32,    33,    34,    51,    52,    37,
    38,    39,    -1,    41,    42,    59,    60,     5,     6,    -1,
    -1,    -1,    -1,    51,    -1,    -1,    -1,    55,    -1,    -1,
    -1,    59,    60,     5,     6,    -1,    -1,    -1,    -1,    -1,
    28,    -1,    -1,    31,    32,    33,    34,    -1,    -1,    37,
    38,    39,    -1,    41,    42,    -1,    28,    -1,    -1,    31,
    32,    33,    34,    51,    52,    37,    38,    39,    -1,    41,
    42,    59,    60,     5,     6,    -1,    -1,    -1,    -1,    51,
    52,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,     5,
     6,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    31,
    32,    33,    34,    -1,    -1,    37,    38,    39,    -1,    41,
    42,    -1,    28,    -1,    -1,    31,    32,    33,    34,    51,
    52,    37,    38,    39,    -1,    41,    42,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    59,    60,    40,    41,    42,    43,    44,
    45,    -1,    47,    48,    49,    50,    -1,    -1,    53,    -1,
    55,    -1,    -1,    58,    -1,    -1,    61,    62,    63,    -1,
    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    80,    81,    82,    83,    84,
    85,    86,    -1,    -1,    -1,    -1,    -1,    92,    93,    40,
    41,    42,    43,    44,    45,    -1,    47,    48,    49,    50,
    -1,    -1,    -1,    -1,    55,    -1,    -1,    58,    -1,    -1,
    61,    62,    63,    -1,    -1,    -1,    67,    68,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
    81,    82,    83,    84,    85,    86,    -1,    -1,    -1,    -1,
    -1,    92,    93,    40,    41,    42,    43,    44,    45,    -1,
    47,    48,    49,    50,    -1,    52,    -1,    -1,    -1,    -1,
    -1,    58,    -1,    -1,    61,    62,    63,    -1,    -1,    -1,
    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    86,
    -1,    -1,    -1,    -1,    -1,    92,    93,    40,    41,    42,
    43,    44,    45,    -1,    47,    48,    49,    50,    -1,    52,
    -1,    -1,    -1,    -1,    -1,    58,    -1,    -1,    61,    62,
    63,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    82,
    83,    84,    85,    86,    -1,    -1,    -1,    -1,    -1,    92,
    93,    40,    41,    42,    43,    44,    45,    -1,    47,    48,
    49,    50,    -1,    52,    -1,    -1,    -1,    -1,    -1,    58,
    -1,    -1,    61,    62,    63,    -1,    -1,    -1,    67,    68,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    80,    81,    82,    83,    84,    85,    86,    -1,    -1,
    -1,    -1,    -1,    92,    93,    40,    41,    42,    43,    44,
    45,    -1,    47,    48,    49,    50,    -1,    52,    -1,    -1,
    -1,    -1,    -1,    58,    -1,    -1,    61,    62,    63,    -1,
    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    80,    81,    82,    83,    84,
    85,    86,    -1,    -1,    -1,    -1,    -1,    92,    93,    40,
    41,    42,    43,    44,    45,    -1,    47,    48,    49,    50,
    -1,    -1,    -1,    -1,    55,    -1,    -1,    58,    -1,    -1,
    61,    62,    63,    -1,    -1,    -1,    67,    68,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
    81,    82,    83,    84,    85,    86,    -1,    -1,    -1,    -1,
    -1,    92,    93,    40,    41,    42,    43,    44,    45,    -1,
    47,    48,    49,    50,    -1,    52,    -1,    -1,    -1,    -1,
    -1,    58,    -1,    -1,    61,    62,    63,    -1,    -1,    -1,
    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    86,
    -1,    -1,    -1,    -1,    -1,    92,    93,    40,    41,    42,
    43,    44,    45,    -1,    47,    48,    49,    50,    -1,    52,
    -1,    -1,    -1,    -1,    -1,    58,    -1,    -1,    61,    62,
    63,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    82,
    83,    84,    85,    86,    -1,    -1,    -1,    -1,    -1,    92,
    93,    40,    41,    42,    43,    44,    45,    -1,    47,    48,
    49,    50,    -1,    -1,    -1,    54,    -1,    -1,    -1,    58,
    -1,    -1,    61,    62,    63,    -1,    -1,    -1,    67,    68,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    80,    81,    82,    83,    84,    85,    86,    -1,    -1,
    -1,    -1,    -1,    92,    93,    40,    41,    42,    43,    44,
    45,    -1,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
    55,    -1,    -1,    58,    -1,    -1,    61,    62,    63,    -1,
    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    80,    81,    82,    83,    84,
    85,    86,    -1,    -1,    -1,    -1,    -1,    92,    93,    40,
    41,    42,    43,    44,    45,    -1,    47,    48,    49,    50,
    -1,    52,    -1,    -1,    -1,    -1,    -1,    58,    -1,    -1,
    61,    62,    63,    -1,    -1,    -1,    67,    68,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
    81,    82,    83,    84,    85,    86,    -1,    -1,    -1,    -1,
    -1,    92,    93,    40,    41,    42,    43,    44,    45,    -1,
    47,    48,    49,    50,    -1,    52,    -1,    -1,    -1,    -1,
    -1,    58,    -1,    -1,    61,    62,    63,    -1,    -1,    -1,
    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    86,
    -1,    -1,    -1,    -1,    -1,    92,    93,    40,    41,    42,
    43,    44,    45,    -1,    47,    48,    49,    50,    -1,    -1,
    -1,    -1,    55,    -1,    -1,    58,    -1,    -1,    61,    62,
    63,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    82,
    83,    84,    85,    86,    -1,    -1,    -1,    -1,    -1,    92,
    93,    40,    41,    42,    43,    44,    45,    -1,    47,    48,
    49,    50,    -1,    -1,    -1,    -1,    55,    -1,    -1,    58,
    -1,    -1,    61,    62,    63,    -1,    -1,    -1,    67,    68,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    80,    81,    82,    83,    84,    85,    86,    -1,    -1,
    -1,    -1,    -1,    92,    93,    40,    41,    42,    43,    44,
    45,    -1,    47,    48,    49,    50,    -1,    52,    -1,    -1,
    -1,    -1,    -1,    58,    -1,    -1,    61,    62,    63,    -1,
    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    80,    81,    82,    83,    84,
    85,    86,    -1,    -1,    -1,    -1,    -1,    92,    93,    40,
    41,    42,    43,    44,    45,    -1,    47,    48,    49,    50,
    -1,    52,    -1,    -1,    -1,    -1,    -1,    58,    -1,    -1,
    61,    62,    63,    -1,    -1,    -1,    67,    68,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
    81,    82,    83,    84,    85,    86,    -1,    -1,    -1,    -1,
    -1,    92,    93,    40,    41,    42,    43,    44,    45,    -1,
    47,    48,    49,    50,    -1,    52,    -1,    -1,    -1,    -1,
    -1,    58,    -1,    -1,    61,    62,    63,    -1,    -1,    -1,
    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    86,
    -1,    -1,    -1,    -1,    -1,    92,    93,    40,    41,    42,
    43,    44,    45,    -1,    47,    48,    49,    50,    -1,    -1,
    -1,    -1,    55,    -1,    -1,    58,    -1,    -1,    61,    62,
    63,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    82,
    83,    84,    85,    86,    -1,    -1,    -1,    -1,    -1,    92,
    93,    40,    41,    42,    43,    44,    45,    -1,    47,    48,
    49,    50,    -1,    -1,    -1,    -1,    55,    -1,    -1,    58,
    -1,    -1,    61,    62,    63,    -1,    -1,    -1,    67,    68,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    80,    81,    82,    83,    84,    85,    86,    -1,    -1,
    -1,    -1,    -1,    92,    93,    40,    41,    42,    43,    44,
    45,    -1,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
    55,    -1,    -1,    58,    -1,    -1,    61,    62,    63,    -1,
    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    80,    81,    82,    83,    84,
    85,    86,    -1,    -1,    -1,    -1,    -1,    92,    93,    40,
    41,    42,    43,    44,    45,    -1,    47,    48,    49,    50,
    -1,    -1,    -1,    -1,    55,    -1,    -1,    58,    -1,    -1,
    61,    62,    63,    -1,    -1,    -1,    67,    68,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
    81,    82,    83,    84,    85,    86,    -1,    -1,    -1,    -1,
    -1,    92,    93,    40,    41,    42,    43,    44,    45,    -1,
    47,    48,    49,    50,    -1,    -1,    -1,    -1,    55,    -1,
    -1,    58,    -1,    -1,    61,    62,    63,    -1,    -1,    -1,
    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    86,
    -1,    -1,    -1,    -1,    -1,    92,    93,    40,    41,    42,
    43,    44,    45,    -1,    47,    48,    49,    50,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    58,    -1,    -1,    61,    62,
    63,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    82,
    83,    84,    85,    86,    -1,    -1,    -1,    -1,    -1,    92,
    93,    40,    41,    42,    43,    44,    45,    -1,    47,    48,
    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
    -1,    -1,    61,    62,    63,    -1,    -1,    -1,    67,    68,
    40,    41,    42,    43,    44,    45,    -1,    47,    48,    49,
    50,    80,    81,    82,    83,    84,    85,    86,    58,    -1,
    -1,    61,    62,    63,    93,    -1,    -1,    67,    68,    40,
    41,    42,    43,    44,    45,    -1,    47,    48,    49,    50,
    80,    81,    82,    83,    84,    -1,    86,    58,    -1,    -1,
    61,    62,    63,    93,    -1,    -1,    67,    68,    40,    41,
    42,    43,    44,    45,    -1,    47,    -1,    49,    50,    80,
    81,    82,    83,    -1,    -1,    86,    58,    -1,    -1,    61,
    62,    63,    93,    -1,    -1,    67,    68,    40,    41,    42,
    43,    44,    45,    -1,    47,    -1,    49,    50,    80,    81,
    82,    83,    -1,    -1,    86,    -1,    -1,    -1,    61,    62,
    63,    93,    -1,    -1,    67,    68,    40,    41,    42,    43,
    44,    45,    -1,    47,    -1,    -1,    50,    80,    81,    82,
    83,    -1,    -1,    86,    -1,    -1,    -1,    61,    62,    63,
    93,    -1,    -1,    67,    68,    40,    41,    42,    43,    44,
    45,    -1,    47,    -1,    -1,    50,    80,    81,    82,    83,
    -1,    -1,    86,    -1,    -1,    -1,    61,    62,    63,    93,
    -1,    -1,    67,    68,    -1,    -1,    46,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    83,    -1,
    -1,    86,    -1,    -1,    64,    65,    46,    -1,    93,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    -1,
    -1,    46,    -1,    -1,    64,    65,    -1,    -1,    88,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    64,
    65,    -1,    -1,    -1,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    40,    41,    42,    43,    -1,    -1,
    -1,    47,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    62,    63,    -1,    -1,
    -1,    67,    68
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 147 "cmdgram.y"
{ ;
    break;}
case 2:
#line 152 "cmdgram.y"
{ yyval.stmt = nil; ;
    break;}
case 3:
#line 154 "cmdgram.y"
{ if(!statementList) { statementList = yyvsp[0].stmt; } else { statementList->append(yyvsp[0].stmt); } ;
    break;}
case 4:
#line 159 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 5:
#line 161 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 6:
#line 163 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 7:
#line 168 "cmdgram.y"
{ yyval.stmt = yyvsp[-2].stmt; for(StmtNode *walk = (yyvsp[-2].stmt);walk;walk = walk->getNext() ) walk->setPackage(yyvsp[-4].s); ;
    break;}
case 8:
#line 173 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 9:
#line 175 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; (yyvsp[-1].stmt)->append(yyvsp[0].stmt);  ;
    break;}
case 10:
#line 180 "cmdgram.y"
{ yyval.stmt = nil; ;
    break;}
case 11:
#line 182 "cmdgram.y"
{ if(!yyvsp[-1].stmt) { yyval.stmt = yyvsp[0].stmt; } else { (yyvsp[-1].stmt)->append(yyvsp[0].stmt); yyval.stmt = yyvsp[-1].stmt; } ;
    break;}
case 17:
#line 192 "cmdgram.y"
{ yyval.stmt = BreakStmtNode::alloc(); ;
    break;}
case 18:
#line 194 "cmdgram.y"
{ yyval.stmt = ContinueStmtNode::alloc(); ;
    break;}
case 19:
#line 196 "cmdgram.y"
{ yyval.stmt = ReturnStmtNode::alloc(NULL); ;
    break;}
case 20:
#line 198 "cmdgram.y"
{ yyval.stmt = ReturnStmtNode::alloc(yyvsp[-1].expr); ;
    break;}
case 21:
#line 200 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 22:
#line 202 "cmdgram.y"
{ yyval.stmt = TTagSetStmtNode::alloc(yyvsp[-3].s, yyvsp[-1].expr, NULL); ;
    break;}
case 23:
#line 204 "cmdgram.y"
{ yyval.stmt = TTagSetStmtNode::alloc(yyvsp[-5].s, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 24:
#line 206 "cmdgram.y"
{ yyval.stmt = StrConstNode::alloc(yyvsp[0].str, false, true); ;
    break;}
case 25:
#line 211 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc(yyvsp[-6].s, NULL, yyvsp[-4].var, yyvsp[-1].stmt); ;
    break;}
case 26:
#line 213 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc(yyvsp[-6].s, yyvsp[-8].s, yyvsp[-4].var, yyvsp[-1].stmt); ;
    break;}
case 27:
#line 218 "cmdgram.y"
{ yyval.var = NULL; ;
    break;}
case 28:
#line 220 "cmdgram.y"
{ yyval.var = yyvsp[0].var; ;
    break;}
case 29:
#line 225 "cmdgram.y"
{ yyval.var = VarNode::alloc(yyvsp[0].s, NULL); ;
    break;}
case 30:
#line 227 "cmdgram.y"
{ yyval.var = yyvsp[-2].var; ((StmtNode*)(yyvsp[-2].var))->append((StmtNode*)VarNode::alloc(yyvsp[0].s, NULL)); ;
    break;}
case 31:
#line 232 "cmdgram.y"
{ yyval.stmt = ObjectDeclNode::alloc(ConstantNode::alloc(yyvsp[-8].s), ConstantNode::alloc(yyvsp[-6].s), NULL, yyvsp[-5].s, yyvsp[-2].slist, NULL, true, false, false); ;
    break;}
case 32:
#line 237 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc(yyvsp[-7].expr, yyvsp[-5].expr, NULL, yyvsp[-4].s, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, false, true); ;
    break;}
case 33:
#line 239 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc(yyvsp[-4].expr, yyvsp[-2].expr, NULL, yyvsp[-1].s, NULL, NULL, false, false, true); ;
    break;}
case 34:
#line 244 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc(yyvsp[-8].expr, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-5].s, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, false, false); ;
    break;}
case 35:
#line 246 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc(yyvsp[-5].expr, yyvsp[-3].expr, yyvsp[-1].expr, yyvsp[-2].s, NULL, NULL, false, false, false); ;
    break;}
case 36:
#line 248 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc(yyvsp[-10].expr, yyvsp[-7].expr, yyvsp[-4].expr, yyvsp[-5].s, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, true, false); ;
    break;}
case 37:
#line 250 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc(yyvsp[-7].expr, yyvsp[-4].expr, yyvsp[-1].expr, yyvsp[-2].s, NULL, NULL, false, true, false); ;
    break;}
case 38:
#line 255 "cmdgram.y"
{ yyval.s = NULL; ;
    break;}
case 39:
#line 257 "cmdgram.y"
{ yyval.s = yyvsp[0].s; ;
    break;}
case 40:
#line 262 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc("", false); ;
    break;}
case 41:
#line 264 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 42:
#line 269 "cmdgram.y"
{ yyval.expr = NULL; ;
    break;}
case 43:
#line 271 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 44:
#line 276 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = NULL; ;
    break;}
case 45:
#line 278 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[0].slist; yyval.odcl.decls = NULL; ;
    break;}
case 46:
#line 283 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = NULL; ;
    break;}
case 47:
#line 285 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[0].slist; yyval.odcl.decls = NULL; ;
    break;}
case 48:
#line 287 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = yyvsp[0].od; ;
    break;}
case 49:
#line 289 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[-1].slist; yyval.odcl.decls = yyvsp[0].od; ;
    break;}
case 50:
#line 294 "cmdgram.y"
{ yyval.od = yyvsp[-1].od; ;
    break;}
case 51:
#line 296 "cmdgram.y"
{ yyvsp[-2].od->append(yyvsp[-1].od); yyval.od = yyvsp[-2].od; ;
    break;}
case 52:
#line 301 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 53:
#line 303 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 54:
#line 308 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].ifnode; yyvsp[-1].ifnode->propagateSwitchExpr(yyvsp[-4].expr, false); ;
    break;}
case 55:
#line 310 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].ifnode; yyvsp[-1].ifnode->propagateSwitchExpr(yyvsp[-4].expr, true); ;
    break;}
case 56:
#line 315 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc(yyvsp[-3].i, yyvsp[-2].expr, yyvsp[0].stmt, NULL, false); ;
    break;}
case 57:
#line 317 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc(yyvsp[-6].i, yyvsp[-5].expr, yyvsp[-3].stmt, yyvsp[0].stmt, false); ;
    break;}
case 58:
#line 319 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc(yyvsp[-4].i, yyvsp[-3].expr, yyvsp[-1].stmt, yyvsp[0].ifnode, true); ;
    break;}
case 59:
#line 324 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr;;
    break;}
case 60:
#line 326 "cmdgram.y"
{ (yyvsp[-2].expr)->append(yyvsp[0].expr); yyval.expr=yyvsp[-2].expr; ;
    break;}
case 61:
#line 331 "cmdgram.y"
{ yyval.stmt = IfStmtNode::alloc(yyvsp[-4].i, yyvsp[-2].expr, yyvsp[0].stmt, NULL, false); ;
    break;}
case 62:
#line 333 "cmdgram.y"
{ yyval.stmt = IfStmtNode::alloc(yyvsp[-6].i, yyvsp[-4].expr, yyvsp[-2].stmt, yyvsp[0].stmt, false); ;
    break;}
case 63:
#line 338 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-4].i, nil, yyvsp[-2].expr, nil, yyvsp[0].stmt, false); ;
    break;}
case 64:
#line 340 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-3].i, nil, yyvsp[-1].expr, nil, yyvsp[-4].stmt, true); ;
    break;}
case 65:
#line 345 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-8].i, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 66:
#line 347 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i, yyvsp[-5].expr, yyvsp[-3].expr, NULL, yyvsp[0].stmt, false); ;
    break;}
case 67:
#line 349 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i, yyvsp[-5].expr, NULL, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 68:
#line 351 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i, yyvsp[-4].expr, NULL, NULL, yyvsp[0].stmt, false); ;
    break;}
case 69:
#line 353 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i, NULL, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 70:
#line 355 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i, NULL, yyvsp[-3].expr, NULL, yyvsp[0].stmt, false); ;
    break;}
case 71:
#line 357 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i, NULL, NULL, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 72:
#line 359 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-5].i, NULL, NULL, NULL, yyvsp[0].stmt, false); ;
    break;}
case 73:
#line 364 "cmdgram.y"
{ yyval.stmt = yyvsp[0].expr; ;
    break;}
case 74:
#line 369 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 75:
#line 371 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 76:
#line 373 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 77:
#line 375 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 78:
#line 377 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 79:
#line 379 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 80:
#line 381 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 81:
#line 383 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 82:
#line 385 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 83:
#line 387 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 84:
#line 389 "cmdgram.y"
{ yyval.expr = FloatUnaryExprNode::alloc(yyvsp[-1].i, yyvsp[0].expr); ;
    break;}
case 85:
#line 391 "cmdgram.y"
{ yyval.expr = TTagDerefNode::alloc(yyvsp[0].expr); ;
    break;}
case 86:
#line 393 "cmdgram.y"
{ yyval.expr = TTagExprNode::alloc(yyvsp[0].s); ;
    break;}
case 87:
#line 395 "cmdgram.y"
{ yyval.expr = ConditionalExprNode::alloc(yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 88:
#line 397 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 89:
#line 399 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 90:
#line 401 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 91:
#line 403 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 92:
#line 405 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 93:
#line 407 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 94:
#line 409 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 95:
#line 411 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 96:
#line 413 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 97:
#line 415 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 98:
#line 417 "cmdgram.y"
{ yyval.expr = StreqExprNode::alloc(yyvsp[-2].expr, yyvsp[0].expr, true); ;
    break;}
case 99:
#line 419 "cmdgram.y"
{ yyval.expr = StreqExprNode::alloc(yyvsp[-2].expr, yyvsp[0].expr, false); ;
    break;}
case 100:
#line 421 "cmdgram.y"
{ yyval.expr = StrcatExprNode::alloc(yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].i); ;
    break;}
case 101:
#line 423 "cmdgram.y"
{ yyval.expr = IntUnaryExprNode::alloc(yyvsp[-1].i, yyvsp[0].expr); ;
    break;}
case 102:
#line 425 "cmdgram.y"
{ yyval.expr = IntUnaryExprNode::alloc(yyvsp[-1].i, yyvsp[0].expr); ;
    break;}
case 103:
#line 427 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc(yyvsp[0].str, true); ;
    break;}
case 104:
#line 429 "cmdgram.y"
{ yyval.expr = FloatNode::alloc(yyvsp[0].f); ;
    break;}
case 105:
#line 431 "cmdgram.y"
{ yyval.expr = IntNode::alloc(yyvsp[0].i); ;
    break;}
case 106:
#line 433 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc(StringTable->insert("break")); ;
    break;}
case 107:
#line 435 "cmdgram.y"
{ yyval.expr = SlotAccessNode::alloc(yyvsp[0].slot.object, yyvsp[0].slot.array, yyvsp[0].slot.slotName); ;
    break;}
case 108:
#line 437 "cmdgram.y"
{ yyval.expr = InternalSlotAccessNode::alloc(yyvsp[0].intslot.object, yyvsp[0].intslot.slotExpr, yyvsp[0].intslot.recurse); ;
    break;}
case 109:
#line 439 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc(yyvsp[0].s); ;
    break;}
case 110:
#line 441 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc(yyvsp[0].str, false); ;
    break;}
case 111:
#line 443 "cmdgram.y"
{ yyval.expr = (ExprNode*)VarNode::alloc(yyvsp[0].s, NULL); ;
    break;}
case 112:
#line 445 "cmdgram.y"
{ yyval.expr = (ExprNode*)VarNode::alloc(yyvsp[-3].s, yyvsp[-1].expr); ;
    break;}
case 113:
#line 450 "cmdgram.y"
{ yyval.slot.object = yyvsp[-2].expr; yyval.slot.slotName = yyvsp[0].s; yyval.slot.array = NULL; ;
    break;}
case 114:
#line 452 "cmdgram.y"
{ yyval.slot.object = yyvsp[-5].expr; yyval.slot.slotName = yyvsp[-3].s; yyval.slot.array = yyvsp[-1].expr; ;
    break;}
case 115:
#line 457 "cmdgram.y"
{ yyval.intslot.object = yyvsp[-2].expr; yyval.intslot.slotExpr = yyvsp[0].expr; yyval.intslot.recurse = false; ;
    break;}
case 116:
#line 459 "cmdgram.y"
{ yyval.intslot.object = yyvsp[-2].expr; yyval.intslot.slotExpr = yyvsp[0].expr; yyval.intslot.recurse = true; ;
    break;}
case 117:
#line 464 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc(yyvsp[0].s); ;
    break;}
case 118:
#line 466 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 119:
#line 471 "cmdgram.y"
{ yyval.asn.token = '+'; yyval.asn.expr = FloatNode::alloc(1); ;
    break;}
case 120:
#line 473 "cmdgram.y"
{ yyval.asn.token = '-'; yyval.asn.expr = FloatNode::alloc(1); ;
    break;}
case 121:
#line 475 "cmdgram.y"
{ yyval.asn.token = '+'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 122:
#line 477 "cmdgram.y"
{ yyval.asn.token = '-'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 123:
#line 479 "cmdgram.y"
{ yyval.asn.token = '*'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 124:
#line 481 "cmdgram.y"
{ yyval.asn.token = '/'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 125:
#line 483 "cmdgram.y"
{ yyval.asn.token = '%'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 126:
#line 485 "cmdgram.y"
{ yyval.asn.token = '&'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 127:
#line 487 "cmdgram.y"
{ yyval.asn.token = '^'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 128:
#line 489 "cmdgram.y"
{ yyval.asn.token = '|'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 129:
#line 491 "cmdgram.y"
{ yyval.asn.token = opSHL; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 130:
#line 493 "cmdgram.y"
{ yyval.asn.token = opSHR; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 131:
#line 498 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 132:
#line 500 "cmdgram.y"
{ yyval.expr = yyvsp[0].od; ;
    break;}
case 133:
#line 502 "cmdgram.y"
{ yyval.expr = yyvsp[0].od; ;
    break;}
case 134:
#line 504 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc(yyvsp[-2].s, NULL, yyvsp[0].expr); ;
    break;}
case 135:
#line 506 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc(yyvsp[-5].s, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 136:
#line 508 "cmdgram.y"
{ yyval.expr = AssignOpExprNode::alloc(yyvsp[-1].s, NULL, yyvsp[0].asn.expr, yyvsp[0].asn.token); ;
    break;}
case 137:
#line 510 "cmdgram.y"
{ yyval.expr = AssignOpExprNode::alloc(yyvsp[-4].s, yyvsp[-2].expr, yyvsp[0].asn.expr, yyvsp[0].asn.token); ;
    break;}
case 138:
#line 512 "cmdgram.y"
{ yyval.expr = SlotAssignOpNode::alloc(yyvsp[-1].slot.object, yyvsp[-1].slot.slotName, yyvsp[-1].slot.array, yyvsp[0].asn.token, yyvsp[0].asn.expr); ;
    break;}
case 139:
#line 514 "cmdgram.y"
{ yyval.expr = SlotAssignNode::alloc(yyvsp[-2].slot.object, yyvsp[-2].slot.array, yyvsp[-2].slot.slotName, yyvsp[0].expr); ;
    break;}
case 140:
#line 516 "cmdgram.y"
{ yyval.expr = SlotAssignNode::alloc(yyvsp[-4].slot.object, yyvsp[-4].slot.array, yyvsp[-4].slot.slotName, yyvsp[-1].expr); ;
    break;}
case 141:
#line 521 "cmdgram.y"
{ yyval.expr = FuncCallExprNode::alloc(yyvsp[-3].s, NULL, yyvsp[-1].expr, false); ;
    break;}
case 142:
#line 523 "cmdgram.y"
{ yyval.expr = FuncCallExprNode::alloc(yyvsp[-3].s, yyvsp[-5].s, yyvsp[-1].expr, false); ;
    break;}
case 143:
#line 525 "cmdgram.y"
{ yyvsp[-5].expr->append(yyvsp[-1].expr); yyval.expr = FuncCallExprNode::alloc(yyvsp[-3].s, NULL, yyvsp[-5].expr, true); ;
    break;}
case 144:
#line 530 "cmdgram.y"
{ yyval.expr = NULL; ;
    break;}
case 145:
#line 532 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 146:
#line 537 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 147:
#line 539 "cmdgram.y"
{ (yyvsp[-2].expr)->append(yyvsp[0].expr); yyval.expr = yyvsp[-2].expr; ;
    break;}
case 148:
#line 544 "cmdgram.y"
{ yyval.slist = yyvsp[0].slist; ;
    break;}
case 149:
#line 546 "cmdgram.y"
{ yyvsp[-1].slist->append(yyvsp[0].slist); yyval.slist = yyvsp[-1].slist; ;
    break;}
case 150:
#line 551 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc(NULL, NULL, yyvsp[-3].s, yyvsp[-1].expr); ;
    break;}
case 151:
#line 553 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc(NULL, NULL, yyvsp[-3].s, yyvsp[-1].expr, yyvsp[-4].i); ;
    break;}
case 152:
#line 555 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc(NULL, NULL, StringTable->insert("datablock"), yyvsp[-1].expr); ;
    break;}
case 153:
#line 557 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc(NULL, yyvsp[-4].expr, yyvsp[-6].s, yyvsp[-1].expr); ;
    break;}
case 154:
#line 559 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc(NULL, yyvsp[-4].expr, yyvsp[-6].s, yyvsp[-1].expr, yyvsp[-7].i); ;
    break;}
case 155:
#line 564 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 156:
#line 566 "cmdgram.y"
{ yyval.expr = CommaCatExprNode::alloc(yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 568 "cmdgram.y"


